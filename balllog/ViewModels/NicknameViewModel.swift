//
//  NicknameViewModel.swift
//  balllog
//
//  Created by Ï†ÑÏùÄÌòú on 7/8/25.
//

import Foundation
import Combine

@MainActor
class NicknameViewModel: ObservableObject {
    // MARK: - Published Properties
    @Published var nickname: String = ""
    @Published var nicknameChecked: Bool = false
    @Published var nicknameValid: Bool = false
    @Published var shouldNavigate: Bool = false
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var validationMessage: String = ""
    
    // MARK: - Computed Properties
    var canCheckNickname: Bool {
        !nickname.trimmingCharacters(in: .whitespaces).isEmpty && !isLoading
    }
    
    var canProceed: Bool {
        nicknameValid && nicknameChecked
    }
    
    var isCurrentNickname: Bool {
        let currentNickname = getSavedNickname() ?? ""
        return nickname.trimmingCharacters(in: .whitespaces) == currentNickname
    }
    
    // MARK: - Private Properties
    private let nicknameService: NicknameServiceProtocol
    private let isUpdateMode: Bool
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init(nicknameService: NicknameServiceProtocol = NicknameService(), isUpdateMode: Bool = false) {
        self.nicknameService = nicknameService
        self.isUpdateMode = isUpdateMode
        setupBindings()
        loadSavedNickname()
    }
    
    // MARK: - Public Methods
    func checkNickname() async {
        print("=== ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µ ÌôïÏù∏ ÏãúÏûë ===")
        
        // Î°úÏª¨ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        let validation = NicknameValidation.validate(nickname)
        
        guard validation.isValid else {
            validationMessage = validation.message
            nicknameChecked = true
            nicknameValid = false
            print("‚ùå Î°úÏª¨ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®: \(validation.message)")
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        do {
//            let response = try await nicknameService.checkNicknameAvailability(nickname.trimmingCharacters(in: .whitespaces))
//            
            nicknameChecked = true
            
//            if response.code == "OK" && response.data.isAvailable {
                nicknameValid = true
                validationMessage = "ÏÇ¨Ïö©Í∞ÄÎä•Ìïú ÎãâÎÑ§ÏûÑÏûÖÎãàÎã§."
                print("‚úÖ ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä•")
//            } else {
//                nicknameValid = false
//                validationMessage = response.data.message
//                print("‚ùå ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Î∂àÍ∞Ä: \(response.data.message)")
//            }
            
        }
//        catch {
//            print("‚ùå ÎãâÎÑ§ÏûÑ ÌôïÏù∏ Ïò§Î•ò: \(error)")
//            nicknameChecked = true
//            nicknameValid = false
//            
//            if let nicknameError = error as? NicknameError {
//                validationMessage = nicknameError.localizedDescription
//            } else {
//                validationMessage = "ÎãâÎÑ§ÏûÑ ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
//            }
//        }
        
        isLoading = false
    }
    
    func proceedToNext() async {
        guard !nickname.trimmingCharacters(in: .whitespaces).isEmpty else {
            errorMessage = "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            return
        }
        
        // Î°úÏª¨ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        let validation = NicknameValidation.validate(nickname)
        guard validation.isValid else {
            validationMessage = validation.message
            nicknameValid = false
            return
        }
        
        print("=== ÎãâÎÑ§ÏûÑ ÏÑ§Ï†ï ÏôÑÎ£å ÌõÑ Îã§Ïùå Îã®Í≥Ñ ÏßÑÌñâ ===")
        
        if isUpdateMode {
            await updateNickname()
        } else {
            await createNickname()
        }
    }
    
    func createNickname() async {
        guard !nickname.trimmingCharacters(in: .whitespaces).isEmpty else {
            errorMessage = "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            return
        }
        
        // Î°úÏª¨ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        let validation = NicknameValidation.validate(nickname)
        guard validation.isValid else {
            validationMessage = validation.message
            nicknameValid = false
            return
        }
        
        print("=== ÎãâÎÑ§ÏûÑ ÏÉùÏÑ± ÏãúÏûë ===")
        isLoading = true
        errorMessage = nil
        
        do {
            let response = try await nicknameService.updateNickname(nickname.trimmingCharacters(in: .whitespaces))
            
            if response.code == "OK" {
                print("‚úÖ ÎãâÎÑ§ÏûÑ ÏÉùÏÑ± ÏÑ±Í≥µ")
                shouldNavigate = true
            } else {
                print("‚ùå ÎãâÎÑ§ÏûÑ ÏÉùÏÑ± Ïã§Ìå®: \(response.message)")
                errorMessage = response.message
            }
            
        } catch {
            print("‚ùå ÎãâÎÑ§ÏûÑ ÏÉùÏÑ± Ïò§Î•ò: \(error)")
            
            if let nicknameError = error as? NicknameError {
                // Ï§ëÎ≥µ ÎãâÎÑ§ÏûÑ Ïò§Î•òÏù∏ Í≤ΩÏö∞ validationMessageÎßå ÏÑ§Ï†ïÌïòÍ≥† errorMessageÎäî ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå
                if case .duplicateNickname(let message) = nicknameError {
                    nicknameValid = false
                    validationMessage = message
                    print("üîÑ Ï§ëÎ≥µ ÎãâÎÑ§ÏûÑÏúºÎ°ú Ïù∏Ìï¥ nicknameValidÎ•º falseÎ°ú Î≥ÄÍ≤Ω: \(message)")
                } else {
                    errorMessage = nicknameError.localizedDescription
                }
            } else {
                errorMessage = "ÎãâÎÑ§ÏûÑ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            }
        }
        
        isLoading = false
    }
    
    func updateNickname() async {
        guard !nickname.trimmingCharacters(in: .whitespaces).isEmpty else {
            errorMessage = "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
            return
        }
        
        // Î°úÏª¨ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        let validation = NicknameValidation.validate(nickname)
        guard validation.isValid else {
            validationMessage = validation.message
            nicknameValid = false
            return
        }
        
        print("=== ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë ===")
        isLoading = true
        errorMessage = nil
        
        do {
            let response = try await nicknameService.updateNickname(nickname.trimmingCharacters(in: .whitespaces))
            
            if response.code == "OK" {
                print("‚úÖ ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ")
                shouldNavigate = true
            } else {
                print("‚ùå ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: \(response.message)")
                errorMessage = response.message
            }
            
        } catch {
            print("‚ùå ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: \(error)")
            
            if let nicknameError = error as? NicknameError {
                // Ï§ëÎ≥µ ÎãâÎÑ§ÏûÑ Ïò§Î•òÏù∏ Í≤ΩÏö∞ validationMessageÎßå ÏÑ§Ï†ïÌïòÍ≥† errorMessageÎäî ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå
                if case .duplicateNickname(let message) = nicknameError {
                    nicknameValid = false
                    validationMessage = message
                    print("üîÑ Ï§ëÎ≥µ ÎãâÎÑ§ÏûÑÏúºÎ°ú Ïù∏Ìï¥ nicknameValidÎ•º falseÎ°ú Î≥ÄÍ≤Ω: \(message)")
                } else {
                    errorMessage = nicknameError.localizedDescription
                }
            } else {
                errorMessage = "ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            }
        }
        
        isLoading = false
    }
    
    func clearError() {
        errorMessage = nil
    }
    
    // MARK: - Private Methods
    private func setupBindings() {
        // ÎãâÎÑ§ÏûÑ ÏûÖÎ†• Ïãú Í≤ÄÏÇ¨ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        $nickname
            .sink { [weak self] _ in
                guard let self = self else { return }
                self.nicknameChecked = false
                self.nicknameValid = false
                self.validationMessage = ""
            }
            .store(in: &cancellables)
    }
    
    private func loadSavedNickname() {
        if isUpdateMode {
            // ÏóÖÎç∞Ïù¥Ìä∏ Î™®ÎìúÏóêÏÑúÎäî Ï†ÄÏû•Îêú ÎãâÎÑ§ÏûÑ Î°úÎìú
            if let savedNickname = nicknameService.getSavedNickname() {
                nickname = savedNickname
                print("üìù Ï†ÄÏû•Îêú ÎãâÎÑ§ÏûÑ Î°úÎìú: \(savedNickname)")
            }
        }
    }
    
    private func getSavedNickname() -> String? {
        return nicknameService.getSavedNickname()
    }
}
